/*
 This releas built by Javascript Releaser at Brocade. 
 visited the site of brocade : http://Brocade.sourceforge.net.
 Author : PubTlk@hotmail.com.
 At Tue Sep 01 17:42:07 CST 2009.
*/
var bc = Brocade = { 	version: '0.2.3', 	hashCode:function(s){ 	var h = 0; 	 var len = s.length; 	 for (var i = 0; i < len; i++) { 	 h = 31*h + s.charCodeAt(i); 	 }  return h; 	}, 	toString: function(){ 	return 'bc-' + this.version; 	} }; bc.w = {}; bc.a = {}; bc.u = {}; bc.m = {}; 
bc.loadScript = function (u){ 	var s = new bc.a.ForString(u).request(); 	 if(window.execScript) 	window.execScript(s); 	else 	window.eval(s); }; function getCookieVal(offset) {  var endstr = document.cookie.indexOf (";", offset);  if (endstr == -1) {  endstr = document.cookie.length;  }  return unescape(document.cookie.substring(offset, endstr)); } function getCookie(name) {  var arg = name + "=";  var alen = arg.length;  var clen = document.cookie.length;  var i = 0;  while (i < clen) {  var j = i + alen;  if (document.cookie.substring(i, j) == arg) {  return getCookieVal(j);  }  i = document.cookie.indexOf(" ", i) + 1;  if (i == 0) break;  }  return null; } function setCookie(name, value, expires, path, domain, secure) {  document.cookie = name + "=" + escape (value) +  ((expires) ? "; expires=" + expires : "") +  ((path) ? "; path=" + path : "") +  ((domain) ? "; domain=" + domain : "") +  ((secure) ? "; secure" : ""); } function deleteCookie(name,path,domain) {  if (getCookie(name)) {  document.cookie = name + "=" +  ((path) ? "; path=" + path : "") +  ((domain) ? "; domain=" + domain : "") +  "; expires=Thu, 01-Jan-70 00:00:01 GMT";  } } function getExpDate(days, hours, minutes) {  var expDate = new Date();  if (typeof days == "number" && typeof hours == "number" && typeof hours == "number") {  expDate.setDate(expDate.getDate() + parseInt(days));  expDate.setHours(expDate.getHours() + parseInt(hours));  expDate.setMinutes(expDate.getMinutes() + parseInt(minutes));  return expDate.toGMTString();  } } function getCookieVal(offset) {  var endstr = document.cookie.indexOf (";", offset);  if (endstr == -1) {  endstr = document.cookie.length;  }  return unescape(document.cookie.substring(offset, endstr)); } function getCookie(name) {  var arg = name + "=";  var alen = arg.length;  var clen = document.cookie.length;  var i = 0;  while (i < clen) {  var j = i + alen;  if (document.cookie.substring(i, j) == arg) {  return getCookieVal(j);  }  i = document.cookie.indexOf(" ", i) + 1;  if (i == 0) break;  }  return null; } function setCookie(name, value, expires, path, domain, secure) {  document.cookie = name + "=" + escape (value) +  ((expires) ? "; expires=" + expires : "") +  ((path) ? "; path=" + path : "") +  ((domain) ? "; domain=" + domain : "") +  ((secure) ? "; secure" : ""); } function deleteCookie(name,path,domain) {  if (getCookie(name)) {  document.cookie = name + "=" +  ((path) ? "; path=" + path : "") +  ((domain) ? "; domain=" + domain : "") +  "; expires=Thu, 01-Jan-70 00:00:01 GMT";  } } function isArray(a) {  return isObject(a) && a.constructor == Array; } function isBoolean(a) {  return typeof a == 'boolean'; } function isEmpty(a) {  var i, j;  if (isObject(a)) {  for (i in a) {  j = a[i];  if (isUndef(j) && isFunc(j)) {  return false;  }  }  }  return true; } function isFunc(a) {  return typeof a == 'function'; } function isNull(a) {  return typeof a == 'object' && !a; } function isNumber(a) {  return typeof a == 'number' && isFinite(a); } function isObject(a) {  return (a && typeof a == 'object') || isFunc(a); } function isString(a) {  return typeof a == 'string'; } function isUndef(a) {  return typeof a == 'undefined'; } function extractQueryString(url) {  var ret = (url.indexOf('?') >= 0 && url.indexOf('?') < (url.length-1))  ? url.substr(url.indexOf('?')+1)  : '';  return ret; } function trimQueryString(url) {  var ret = url.indexOf('?') >= 0  ? url.substring(0, url.indexOf('?'))  : url;  return ret; } bc.u.Chain = Object.extend(Array); bc.u.Chain.methods = { 	version: "0.1.000",  type: "bc.u.Chain", 	pos:0, 	add:function(v){ 	this.push(v); 	return this; 	}, 	isEmpty:function(){ 	return this.length == 0; 	}, 	previous:function(){ 	this.pos --; 	if(this.pos < 0) 	return null; 	return this[this.pos -1]; 	}, 	previousAt:function(o){ 	var p = this.indexOf(o); 	if(p == -1 || p == 0) 	return null; 	return this[p - 1]; 	}, 	next:function(){ 	this.pos ++; 	if(this.pos > this.length) 	return null; 	return this[this.pos -1]; 	}, 	nextAt:function(o){ 	var p = this.indexOf(o); 	if(p == -1 || p + 1 >= this.length) 	return null; 	return this[p + 1]; 	}, 	position:function(){ 	return this.pos; 	} }; Object.extend(bc.u.Chain.prototype, bc.u.Chain.methods); Scroll = { 		position:function(){ 	var l=0,t=0; 	l = window.pageXOffset  || document.documentElement.scrollLeft  || document.body.scrollLeft  || 0; 	t = window.pageYOffset  || document.documentElement.scrollTop  || document.body.scrollTop  || 0; 	return [l,t]; 	}, 		view:function(){ 	var w=0,h=0; 	w = window.innerWidth 	||document.documentElement.clientWidth 	||document.body.clientWidth 	||0; 	h = window.innerHeight 	||document.documentElement.clientHeight 	||document.body.clientHeight 	||0; 	return [w,h]; 	}, 		size:function(){ 	var w=0,h=0; 	w = window.scrollWidth 	||document.documentElement.scrollWidth 	||document.body.scrollWidth 	||0; 	h = window.scrollHeight 	||document.documentElement.scrollHeight 	||document.body.scrollHeight 	||0; 	return [w,h]; 	} }; Object.extend(Form,{ 		submit:function(form){ 	if(typeof form != 'object') 	 	form=$(form)||document.getElementsByName(form)[0];	 	for(i=0;i<form.length;i++){ 	 	if(form.elements[i].type=="submit"){ 	 	form.elements[i].click(); 	 	return; 	 	} 	 	}  	var smt = document.createElement("input"); 	smt.type="submit"; 	smt.value=null; 	Element.hide(smt); 	form.appendChild(smt); 	smt.click(); 	} }); bc.u.c={}; 
bc.u.c.Base=function(){}; bc.u.c.Base.prototype={ 	setOptions: function(o) { 	this.options=Object.extend({},o); 	}, 	out:function(e){ 	this.isHover=false; 	if(this.selectedElement && e==this.selectedElement) 	return; 	if(e.getAttribute('disabled')) return; 	if(this.options.hoveredClass){ 	Element.removeClassName(e,this.options.hoveredClass); 	}else{ 	e.style.backgroundColor=this.cacheStyle; 	} 	}, 	hover:function(e){ 	this.isHover=true; 	if(e.getAttribute('disabled')) return; 	if(this.selectedElement && e==this.selectedElement) 	return; 	if(this.options.hoveredClass){ 	Element.addClassName(e,this.options.hoveredClass); 	}else{ 	this.cacheStyle=e.style.backgroundColor; 	e.style.backgroundColor="#CCCCFF"; 	} 	if(typeof this.options.cursor == 'undefined') 	if(window.back) 	e.style.cursor="pointer"; 	else e.style.cursor="hand"; 	else 	e.style.cursor= this.options.cursor; 	} } 
bc.u.c.Ul4Menu=Class.create(); bc.u.c.Ul4Menu.prototype =Object.extend({ 	initialize:function(t,o){ 	this.hoverListener = this.onHover.bindAsEventListener(this); 	this.clickListener = this.onClick.bindAsEventListener(this); 	Event.observe(t, "click", this.clickListener); 	Event.observe(t, "mouseover", this.hoverListener); 	if(o.defaultClass || o.disabledClass){ 	var li = t.getElementsByTagName("li"); 	for(var j=0;j<li.length;j++){ 	if(o.disabledClass && li[j].getAttribute('disabled')){ 	Element.addClassName(li[j],o.disabledClass); 	}else if(o.defaultClass) 	Element.addClassName(li[j],o.defaultClass); 	} 	} 	this.setOptions(o); 	}, 	onHover:function(evt){ 	var e=Event.findElement(evt, 'LI'); 	if(e === undefined || e.type===undefined)return; 	Event.observe(e, "mouseout", function(evt){ 	this.out(e); 		}.bindAsEventListener(this)); 	this.hover(e); 		}, 	onClick:function(evt){ 	var e = Event.findElement(evt, 'LI'); 	if(e === undefined || e.type===undefined)return; 	if(e.getAttribute('disabled')) { 	Event.stop(evt); 	return; 	} 	if(this.options.callback)this.options.callback.call(this,this.collect(e));else return false; 	}, 	collect:function(element){ 	var vs = new Array(); 	vs[0]=element.id||""; 	vs[1]=element.getAttribute("value")||element.innerHTML; 	return vs; 	} },bc.u.c.Base.prototype); 
bc.u.c.Ul=Class.create(); bc.u.c.Ul.prototype =Object.extend({ 	initialize:function(t,o){ 	var me = this; 	$A([].concat(t)).each(function(e){ 	Event.observe(e, "click", me.onClick.bindAsEventListener(me)); 	Event.observe(e, "mouseover", me.onHover.bindAsEventListener(me)); 	if(o.defaultClass || o.disabledClass){ 	var li = e.getElementsByTagName("li"); 	for(var j=0;j<li.length;j++){ 	if(o.disabledClass && li[j].getAttribute('disabled')){ 	Element.addClassName(li[j],o.disabledClass); 	}else if(o.defaultClass) 	Element.addClassName(li[j],o.defaultClass); 	} 	} 	}.bind(this)); 	this.setOptions(o); 	}, 	onClick:function(evt){ 	var e = Event.findElement(evt, 'LI'); 	if(e === undefined || e.type===undefined)return; 	if (e.getAttribute('disabled')) { 	Event.stop(evt); 	return; 	} 	if(!this.selectedElement || !(e === this.selectedElement)){ 	Element.removeClassName(this.selectedElement,this.options.hoveredClass); 	Element.addClassName(e,this.options.selectedClass); 	} 	if(this.options.callback)this.options.callback.call(this,this.collect(e));else return false; 	}, 	onHover:function(evt){ 	var e=Event.findElement(evt, 'LI'); 	if(e === undefined || e.type===undefined)return; 	Event.observe(e, "mouseout", function(evt){ 	this.out(e); 	Event.stop(evt); 	}.bindAsEventListener(this)); 	this.hover(e); 		}, 	collect:function(element){ 	if(element!=this.selectedElement){ 	if(this.options.selectedClass){ 	Element.removeClassName(element,this.options.hoveredClass); 	Element.addClassName(element,this.options.selectedClass); 	if(this.selectedElement){ 	Element.removeClassName(this.selectedElement,this.options.selectedClass); 	} 	}else{ 	if(this.selectedElement)this.selectedElement.style.backgroundColor=this.cacheStyle; 	this.cacheStyle=element.style.backgroundColor="#FFCCFF"; 	} 	this.selectedElement=element; 	} 	var vs = new Array(); 	vs[0]=element.id||""; 	vs[1]=element.getAttribute("value")||element.innerHTML; 	return vs; 	} },bc.u.c.Base.prototype); 
bc.u.c.Table=Class.create(); bc.u.c.Table.prototype =Object.extend({ 	initialize:function(t,o){ 	this.clickEventListener = this.onClick.bindAsEventListener(this); 	$A([].concat(t)).each(function(e){ 	Event.observe(e, "click", this.clickEventListener,true); 		var t=e.getElementsByTagName("TR"); 	for(var i=0;i<t.length;i++){ 	if(o.disabledClass && t[i].getAttribute('disabled')){ 	Element.addClassName(t[i],o.disabledClass); 	}else if(o.defaultClass) 	Element.addClassName(t[i],o.defaultClass); 	Event.observe(t[i], "mouseover", this.onHover.bindAsEventListener(this)); 	} 	}.bind(this)); 	this.setOptions(o); 	}, 	onClick:function(evt){ 	var vs; 	var e = Event.findElement(evt, 'TR'); 	if(this.options.isHeader && e.rowIndex==0)return; 	if(e.getAttribute('disabled')) return; 	if(this.options.callback)this.options.callback(this.collect(e));else return false; 	}, 	onHover:function(evt){ 	var e=Event.findElement(evt, 'TR'); 	if(this.options.isHeader && e.rowIndex==0)return; 	Event.observe(e, "mouseout", function(evt){ 	this.out(e); 	Event.stop(evt); 	}.bindAsEventListener(this)); 	this.hover(e); 	Event.stop(evt); 	}, 		collect:function(e){ 	if(e!=this.selectedElement){ 	if(this.options.selectedClass){ 	Element.removeClassName(e,this.options.hoveredClass); 	Element.addClassName(e,this.options.selectedClass); 	if(this.selectedElement){ 	Element.removeClassName(this.selectedElement,this.options.selectedClass); 	} 	}else{ 	if(this.selectedElement)this.selectedElement.style.backgroundColor=this.cacheStyle; 	this.cacheStyle=e.style.backgroundColor="#FFCCFF"; 	} 	this.selectedElement=e; 	} 	var tds = e.getElementsByTagName('TD'); 	var vs = new Array(); 	for(var i=0;i<tds.length;i++){ 		vs[i]=tds[i].getAttribute('value')||tds[i].innerHTML; 	} 	return vs; 	} },bc.u.c.Base.prototype); 
bc.a.Base = { 		setOptions: function(options) { 	var requestHeaders = []; 	this.isFailure=false; 	 return this.options = Object.extend({ 	 	evalScripts: true, 	 	onComplete: this.onResponse.bind(this), 	 		 	onException:function(t,e){if(this.isFailure)return;this.isFailure=true;this.error(-1,(e.message||e.toString()));}.bind(this) 	 		 },options || {});  	},  	collect: function() {  	 		 	var t = new Array('checkbox','radio','text','textarea','password','hidden','select-one','select-multiple'); 	 	var body = (this.url.indexOf('?') >= 0 && this.url.indexOf('?') < (this.url.length-1))? this.url.substr(this.url.indexOf('?')+1): null; 	 	 	this._url = this.url.indexOf('?') >= 0? this.url.substring(0, this.url.indexOf('?')):this.url;  	if(body != null){  	 	return encodeURI(body);  	}  	 	if(null != this.options.fields){ 	 	var a = this.options.fields.split(','); 	 	body=""; 	 	for(var i=0;i<a.length;i++){ 	 	var v = null; 	 	if(t.indexOf($(a[i]).type,0) >= 0){ 	 	v = $F(a[i]); 	 	}else{ 	 	v = $(a[i]).innerHTML; 	 	} 	 	if(null==v) 	 	v=""; 	 	body += a[i]+"="+encodeURI(v)+"&"; 	 	} 	 		 	return body.substring(0,body.length-1);  	}  	 	var f;  	if(null != (f = $(this.options.form)||document.getElementsByName(this.options.form)[0])){  	body="";  	body=Form.serialize(f);  	 	return body;  	}  	 	return null;  	},  	sendRequest: function() { 	this.reqType = 'XML'; 	this.options.postBody = this.collect(); 	this.ri(true); 		 return new Ajax.Request(this._url,this.options); 	}, 	sendUpdateRequest: function(target) { 	this.reqType = 'text'; 	this.options.postBody = this.collect(); 		this.ri(true); 		 return new Ajax.Updater(target,this._url,this.options); 	}, 	sendPeriodicalUpdateRequest: function(target) { 	this.reqType = 'text'; 	this.options.postBody = this.collect(); 	this.ri(true); 		 return new Ajax.PeriodicalUpdater(target, this._url,this.options); 	}, 	 	onResponse: function(request) {	 if (null != request && ((request.status >= 200 && request.status < 300) || request.status == 0)) { 	 var isXML = (this.options.type||this.reqType).toUpperCase() == 'XML'; 	 if(isXML) { 	 	var xmlDoc = request.responseXML; 	 	if ((et = this.isError(xmlDoc)) > 0 && !isUndef(this.error)){	 	var ei = ""; 	 	if(et == 1){ 	 	ei = "<p>Request type is XML,but parse the response XML failured. Case:"+ 	"<br>- "+xmlDoc.documentElement.firstChild.nodeValue +"</p>"+ 	"<p>Response XML: <br>"+request.responseText.escapeHTML()+"</p>"; 		 	} else { 	 	ei = xmlDoc.documentElement.getElementsByTagName("error")[0].firstChild.nodeValue; 	 		 	} 	 	this.error(request.status,ei); 	 	} else if (this._isEmpty(xmlDoc) && !isUndef(this.empty)){	 		this.empty(); 	 	} else { 	 		 	this.handler(request);	 	} 	 } else {	 	var text = request.responseText; 	 	if(text.length ==0 && !isUndef(this.empty)){ 	 		 	this.empty(); 	 	} else { 	 		 	this.handler(request); 	 	} 	 } 	 }else if(null != request){ 	 	this.error(request.status,request.responseText); 	 }  	},  	handler:function(r){  	if(this.options.preFunction)  	this.options.preFunction(r);  	this.ri(false);  	if(this.options.postFunction)  	this.options.postFunction(r);  	},  	empty:function () {  	this.ri(false);  	},  	error:function(n,e) {  	this.ri(false);  	},  	 	_isEmpty: function(xml) {  	if( xml == null)  	return true; 	 var root = xml.documentElement; 	 if (root.getElementsByTagName("elements").length == 0) { 	 return true; 	 } 	 return false; 	}, 		isError: function(xml) { 	 var root = xml.documentElement; 	 if (root.nodeName == "parsererror") { 	 return 1; 	 } 	 if(root.getElementsByTagName("error").length == 1){ 	 	return 2; 	 } 	 return 0; 	}, 		ri:function(b){ 	if(this.indicator) 	this.indicator(b); 	else 	this._indicator(b); 	}, 		_indicator:function (b){ 	var i = $("bc.indicator"); 	if(null == i){ 	new Insertion.Top(document.getElementsByTagName("body")[0], 	 	"<div id=\"bc.indicator\" style=\"padding:2px;" +  	 	"background-color:#FF3300;border:0px;position:fixed;right:1px;top:1px;"+ 	 	"z-index:10000;filter:Alpha(opacity=90);-moz-opacity:0.9;opacity:0.9;"+ 	 	"padding-left:15px;visibility:hidden\"><b>Loading......</b></div>"); 	 		 	i = $("bc.indicator"); 	} 	this._indicatorWidth=i.offsetWidth; 	if(b){ 	i.style.visibility = ''; 	if(navigator.appVersion.indexOf('MSIE')>0){ 	i.style.position="absolute"; 	this.idtp(null); 	Event.observe(window,"scroll",this.idtp.bindAsEventListener(this)); 	Event.observe(window,"resize",this.idtp.bindAsEventListener(this)); 	} 	}else{ 	i.style.visibility = 'hidden'; 	if(navigator.appVersion.indexOf('MSIE')>0){ 	Event.stopObserving(window,"scroll",this.idtp.bindAsEventListener(this)); 	Event.stopObserving(window,"resize",this.idtp.bindAsEventListener(this)); 	} 	} 	}, 	idtp:function(e){ 	var t= Scroll.position(); 	var v=$("bc.indicator"); 	v.style.top=t[1]+"px"; 	v.innerHTML=v.innerHTML; 	}, 		_catchEvent: function(l) { 	var isCatch = false; 	if (this.options.sourceClass) { 	 eo = document.getElementsByClassName(this.options.sourceClass); 	 for (var i=0; i<eo.length; i++) { 	 	Event.observe(eo[i], this.options.eventType, l.bindAsEventListener(this)); 	 } 	 isCatch = true; 	 } else if(this.options.source) { 	 Event.observe($(this.options.source), this.options.eventType||"click",l.bindAsEventListener(this)); 	 isCatch = true; 	 } 	 return isCatch; 	} }; 
bc.a.Ajax = Class.create({ 	initialize: function(url,options) { 	this.url=url; 	this.setOptions(options); 	this._catchEvent(); 	} }); Object.extend(bc.a.Ajax, bc.a.Base); 
bc.a.ForSync = Class.create(bc.a.Base, { 	version: '0.1.002', 	type:"bc.a.ForSync", 	initialize: function(url,options) { 	this.url = url; 	this.setOptions(options); 	this.options = Object.extend({ 	 	type:"text", 	asynchronous:false, 	evalScripts:false, 	evalJS:false 	 },options || {}); 		}, 	request: function() { 	if(this.options.preFunction) 	if(!this.options.preFunction())	return ; 	var r=this.sendRequest(); 		this.handler(r.transport); 	if(this._trans) 	return this._trans(r.transport.responseText); 	else 	return this.errorMessage||r.transport.responseText; 	},  	handler:function(request) {  	if(this.options.postFunction){  	this.options.postFunction(request);  	}  	this.ri(false);  	},  	error:function(n,e){  	this.isError=true;  	this.errorMessage=e;  	this.ri(false);  	},  	isError:function(){  	return this.isError;  	},  	indicator:function(b){  	if(this.options.indicator) 	this.options.indicator(b,$(this.options.target)); 	else 	this._indicator(b);  	} }); 
bc.a.ForString = Class.create(bc.a.ForSync,{}); 
bc.a.ForArray = Class.create(bc.a.ForSync, { 	_trans: function(t) { 	try{ 	return this.errorMessage||t.split(","); 	}catch(e){ 	throw e; 	} 	} }); 
bc.a.ForHash = Class.create(bc.a.ForSync, { 	_trans: function(t) { 	try{ 	var a ; 	t=t.replace(/\\/g,''); 	eval("a={"+t.replace(/=+/g,': ')+"}"); 	return this.errorMessage||$H(a); 	}catch(e){ 	throw e; 	} 	} }); 
bc.a.Html = Class.create(bc.a.Base, { 	version: "0.1.001", 	type: "bc.a.Html", 	initialize: function(url,options) { 	this.url = url; 	this.setOptions(options); 	this.options.eventType = options.eventType ? options.eventType : "click"; 		if(!this._catchEvent(this.el)) 	this.el(null); 		}, 	el: function(e) { 	if(this.options.preFunction) 	if(!this.options.preFunction())	return ; 	this.sendUpdateRequest(this.options.target); 		},  	handler:function(request) {  	if(this.options.postFunction){  	this.options.postFunction(request);  	}  	this.ri(false);  	},  	error:function(n,e){ 	$(this.options.target).innerHTML=n+":"+e;  	var obj=this;  	setTimeout(obj.ff(e),300);  	this.ri(false);  	},  	ff:function(e){  	var _ei="<iframe src=\"javascript:void(0);\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" name=\""+this.options.target+"#ep\" id=\""+this.options.target+"#ep\"></iframe>";  	new Insertion.Bottom($(this.options.target),_ei);  	Position.clone(this.options.target,this.options.target+"#ep");  	var ep=frames[this.options.target+"#ep"];  	ep.document.clear();  	ep.document.write(e);  	ep.document.close();  	}, 	indicator:function(b){  	if(this.options.indicator)  	this.options.indicator(b,$(this.options.target));  	else  	this._indicator(b);  	} }); 
bc.a.Linkage = Class.create({ 	version: "0.1.004",  type: "bc.a.Linkage", 	 initialize: function(ops){ 	this.id = ops["target"]||ops["id"];  		this.options = Object.extend(ops || {}); 	this.chain = new bc.u.Chain();  } }); bc.a.Linkage.methods = { 	 link: function(args){ 			var op = Object.extend(this.options, args||{}); 	Object.extend(op, {source: this.id});  	var i = new bc.a.Linkage.Item(this, op); 	var obj = this; 	
	i.onLinked = function(s){ 	var n = obj.chain.nextAt(s); 	if(n != null) 	n.link(); 	}.bind(i); 	this.chain.add(i);  return this;  }, 		self:function(args){ 	obj = this; 	this.chain.push(""); 	var _tt = this.options["target"]||this.options["id"]; 	var op = Object.extend(this.options, args||{}); 	Object.extend(op, { 	id:this.options["id"], 	source:_tt 	});  	var i = new bc.a.Linkage.Item.Self(this, op); 	return i; 	}, 		dyna:function(args){ 	var o = Object.extend(this.options, args); 	Object.extend(o, {target:this.id});  	var i = new bc.a.Linkage.Item(this, null, o); 	}, 		end:function(){ 	this.chain.first().link(); 	}, 	fire:function(){ 	this.end(); 	} }; Object.extend(bc.a.Linkage.prototype, bc.a.Linkage.methods); 
bc.a.Linkage.Item = Class.create(bc.a.Base, {  version: "0.1.000",  type: "bc.a.Linkage.Item",   initialize: function(c, ops){ 	this._c = c;  	this.setOptions(ops); 	this.id = ops["id"]||ops["target"]; 	this._t = $(this.id); 	this._s = $(ops["source"]); 		Object.extend(this.options, { 	source:ops["source"], 	eventType:"change" 	}); 	this.listener = this.link.bind(this); 	this._catchEvent(this.listener); 		if(!this.options["infoPanel"]){ 	if(!$(this.id + ":info")) 	new Insertion.After(this._t,"<label id='"+this.id+":info'></label>"); 	this.options["infoPanel"] = this.id + ":info"; 	}  } }); bc.a.Linkage.Item.methods = { 		link:function(e){ 	var tat = this; 	if(!this.onChange(e,tat)) return; 	if(this.options["preFunction"]) 	if(!this.options["preFunction"](e, tat))	return ; 	if(!this.options["selected"]) 	this.options["selected"] = $F(this.id); 	this.url = this._buildUrl(); 	this.sendRequest(); 	}, 		_buildUrl:function(){ 	var url = this.options["url"]; 	if(!url) throw "url is null."; 	var pattern = new RegExp(/\$_/); 	return url.replace(pattern, $F(this._s)); 	}, 		onChange:function(e, t){ 	return true; 	}, 		onLinked:function(t){ 		}, 		onSelected:function(t, v){ 	}, 		isEmpty:function(){ 	return this._sitems <= 0; 	}, 		empty:function(){ 	if(this._emp) return this._emp; 	var _emps = this.options['empty']; 	if(!_emps) return null; 	this._emp = new Option(_emps["text"]?_emps["text"]:"----", _emps["value"]?_emps["value"]:""); 	this._emp["_t"] = "empty"; 	return this._emp; 	}, 		handler:function(r) {  		if(this.options["parser"]) 	this.options["parser"](r.responseXML); 	else  	this.parse(r.responseXML);  	if(this.options["postFunction"])  	this.options["postFunction"](r);  	this.ri(false); 	setTimeout(this.onLinked(this), 50);  	}, 	 	error:function(n,e){ 	this.ri(false);  	if(this.options["errorPanel"]) 	$(this.options["errorPanel"]).innerHTML = "Error:"+e; 	else 	$(this.options["infoPanel"]).innerHTML = "Error:"+e; 		if(this.onError) this.onError(e);  	}, 	 	indicator:function(b){  	if(this.options["indicator"])  	this.options["indicator"](b,$(this.options["infoPanel"]));  	else  	if(b){  	$(this.options["infoPanel"]).show();  	$(this.options["infoPanel"]).innerHTML = "Loading ...";  	}else{  	$(this.options["infoPanel"]).hide();  	}  	}, 	 	parse: function(xml) { 	var root = xml.documentElement; 	 var eles = root.getElementsByTagName("elements"); 	if(eles.length < 1) 	throw "Return to the XML format do'nt match, you can overwrite the parse mathod."; 	 var responseNode = eles[0]; 	 var itemNodes = responseNode.getElementsByTagName("item"); 		this._sitems = itemNodes.length; 	if(this.isEmpty()) return; 		this.clear(this._t); 	 	if(this.options["empty"]){ 	this._t.add(this.empty(),window.innerWidth?null:this._t.length); 	} 	 for (var i=0; i<itemNodes.length; i++) { 	var s = false; 	var n = itemNodes[i].getAttribute("name"); 	var v = itemNodes[i].getAttribute("id"); 	var isD = itemNodes[i].getAttribute("disabled"); 	var _sel = "" + this.options["selected"]||"^|^"; 	if(_sel){ 	var _sa = _sel.split(','); 	if(_sa.indexOf(v) != -1) s = true; 	} 	this.buildItem(n, v, isD, s); 	 } 	 	 this._t.selectedIndex = -1;  },    clear:function(t){  		if(!this.onClear(t)) return false; 	if(t.length > 0){ 	t.length = 0; 	t.selectedIndex = -1; 	} 	return true;  },   onClear:function(t){  	return true;  },   buildItem:function(t,v,d,s){  	var c = new Option(t, v); 	if(s)c.selected = true; 	if(d)c['disabled'] = true; 	this._t.add(c,window.innerWidth?null:this._t.length); 	return c;  },   destory:function(){ 	Element.remove(this._t);  } }; Object.extend(bc.a.Linkage.Item.prototype, bc.a.Linkage.Item.methods); 
bc.a.Linkage.Item.Self = Class.create(bc.a.Linkage.Item, {  version: "0.1.000",  type: "bc.a.Linkage.Item.Self", 	 onChange: function(e){  var o = e.target.options[e.target.selectedIndex];  this.isGoback = true;  	var isEmp = o["_t"] == "empty";  if (!isEmp)  	this._prcChGb(o); 	if(o["_t"] == "goback") 	return true; 	 if (this.options["onSelected"])   this.options["onSelected"](o["text"], o["value"]);  this.onSelected(o["text"], o["value"]); 		if (isEmp) return false;  return true; }, 		_prcChGb:function(o){ 	var chain = this._c.chain;  var chKey = o["value"];  if (o["_t"] != "goback")   chain.push(chKey);   this.preVal = chain.previousAt(chKey);  var p = chain.indexOf(chKey);  if (chain.length < 2)   this.isGoback = false;   if (o["_t"] == "goback")   chain.splice(p + 1, chain.length - 1); 	}, 		onLinked:function(t){ 	var chain = t._c.chain; 	if (chain.length > 1 && !this.isEmpty()) { 	if (!t.isGoback)  	return; 	var ro = new Option(t.options["goback"]||"┗┉┉", t.preVal); 	ro["_t"] = "goback" ; 	if(window.innerWidth) 	t._t.insertBefore(ro, t._t.options[0]); 	else 	t._t.add(ro, 0); 	} 	} }); bc.a.Linkage.Item.Dyna = Object.extend(bc.a.Linkage.Item, { 	version: "0.1.000",  type: "bc.a.Linkage.Item4d", 	initialize: function(c, p, ops){ 	this._c = c;  	this.setOptions(ops); 	this.id = ops["id"]; 	this._t = $(this.id); 	this._s = $(ops["target"]); 		Object.extend(this.options, { 	source:ops["target"], 	eventType:"change" 	}); 	this.listener = this.link.bind(this); 	this._catchEvent(this.listener); 		if(!this.options["infoPanel"]){ 	if(!$(this.id + ":info")) 	new Insertion.After(this._t,"<label id='"+this.id+":info'></label>"); 	this.options["infoPanel"] = this.id + ":info"; 	}  } }); bc.a.Linkage.Item.Dyna.methods = { 		crtSel:function(){ 	} };  
bc.w.Component = Class.create({ 		version: "0.1.012", 		type: "bc.w.Component", 		setProperties: function(options) {  this._p = this.properties = Object.extend({},options || {}); 	}, 		paint: function(id, options) { 	this.id=id;  	this._e= $(id);  	this.setProperties(options);  	 	 	if(this.properties.parent && $(this.properties.parent)){  	this.parent = $(this.properties.parent);  	}  	if(!this._e){  	if(this.parent){  	new Insertion.Bottom(this.parent,"<div id='"+id+"'></div>");  	}else{  	 	 	 		 	new Insertion.Bottom(document.body, "<div id='" + id + "'></div>");  	this._e = $(id);  	}  	this._e= this._e || $(id);  	}  	if(this.isShow()){  	this.show();  	}  	this.element=this._e;  	this.style=this._e.style; 
 	this.setStyle=function(t){Element.setStyle(this._e,t)}.bind(this); 
 	this.getStyle=function(t){return Element.getStyle(this._e,t);}.bind(this); 
 	this.hasClassName=function(c){return Element.hasClassName(this._e,c);}; 
 	this.addClassName=function(c){Element.addClassName(this._e,c);}; 
 	this.removeClassName=function(c){Element.removeClassName(this._e,c);}; 
 	this.scrollTo=function(){Element.scrollTo(this._e);}; 
 	this.toggle=function(){Element.toggle(this._e)}; 
 	this.getDimensions=function(){return Element.getDimensions(this._e)};  	if(this.properties.className)  	this.addClassName(this.properties.className);  	this.scrollListener=this.obscr.bindAsEventListener(this); 	this.resizeListener=this.rs2mx.bindAsEventListener(this);  		var ua = navigator.userAgent;  	if(parseFloat(ua.substring(ua.indexOf("MSIE ") + 5, ua.indexOf(";", ua.indexOf("MSIE ")))) <=6){  	this.isFixIE=true;  	} 	}, 		setWidth:function(w){ 	var d=this._getBdr(this._e); 	var e=this._getPdg(this._e); 	this.setStyle({width:parseInt(w)-d[0]+"px"}); 	}, 		setHeight:function(h){ 	var d=this._getBdr(this._e); 	var e=this._getPdg(this._e); 	this.setStyle({height:parseInt(h)-d[1]-e[1]+"px"}); 	}, 		show : function(){ 	Element.show(this._e); 	if(this.mask){ 	Element.show(this.mask); 	Position.clone(this._e,this.mask); 	} 	if(this.onShow) 	this.onShow(); 	}, 		hide:function(){ 	Element.hide(this._e); 	if(this.mask) 	Element.hide(this.mask); 	}, 		isShow : function(){ 	if(Element.visible(this._e)) 	return true; 	else 	return false; 	}, 		fixIE:function(){ 	if(!this.isFixIE) 	return; 	this.crMask(); 	}, 	crMask:function(){ 	if(null==this.mask){ 	new Insertion.After(this._e,  	 '<iframe id="'+this.type+':'+this.id+'_mask" '+ 	 'style="position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);background:none;" ' +	 'src="javascript:void(0)" frameborder="0" scrolling="no"></iframe>'); 	 	this.mask = $(this.type+':'+this.id+'_mask'); 	} 	 Element.show(this.mask); 	Position.clone(this._e,this.mask); 	}, 	center:function(){ 	var w = 0, h = 0; 	if(this.parent){ 	var sz = Element.getDimensions(this.parent); 	w = sz.width; 	h = sz.height; 	}else{ 	var sz=Scroll.view(); 	w = sz[0]; 	h = sz[1]; 	} 	this.setStyle({  left:((w-Element.getWidth(this._e))/2)+'px',  top:((h-Element.getHeight(this._e))/2)+'px'  }); 	}, 		max:function(){ 	if(this.parent && !this.parent.size){ 	this.parent.size = Element.getDimensions(this.parent); 	this.parent.real = Position.cumulativeOffset(this.parent); 	} 	if(!this.isMax){ 	if(this.onMax) 	 this.onMax(); 	this.size = this.getDimensions(); 	if(!this.parent){ 	if(window.innerWidth) 	document.body.style.overflow="hidden";  	else 	document.body.scroll ="no"; 	window.scroll(0,0); 	Event.observe(window,"scroll",this.scrollListener); 	Event.observe(window,"resize",this.resizeListener); 	} 	if(this.properties.dragable){ 	this.real=Position.cumulativeOffset(this._e); 	}else 	this.real=Position.realOffset(this._e); 	Position.absolutize(this._e); 	this._cacheM=this.getStyle("margin"); 	this.setStyle({margin:'0px'}); 	var a=this._getBdr(this._e); 	var b=this._getPdg(this._e); 	var fixw=b[0]; 	var fixh=b[1]; 	if(!this.isFixIE){ 	fixw += a[0]; 	fixh += a[1]; 	} 	if(this.parent){ 		var c=this._getPdg(this.parent); 	var d=this._getBdr(this.parent); 	var _tWht = (c[0] + d[0]); 	var _lWht = (c[1] + d[1]); 	this.setStyle({ 	top:this.parent.real[1] + _tWht/2 + "px", 	left:this.parent.real[0] + _lWht/2 + "px", 	width:this.parent.size.width - fixw - _tWht + "px", 	height:this.parent.size.height - fixh - _lWht + "px" 	}); 	}else{ 	if(this.isFixIE){ 	fixw =0; 	fixh = 0; 	} 	var sz=Scroll.view(); 	this.setStyle({ 	top:'0px', 	left:'0px', 	width:sz[0]-fixw+"px", 	height:sz[1]-fixh+"px" 	}); 	} 	this.setStyle({zIndex:99999}); 	if(this.mask) 	this.mask.setStyle({zIndex:99998}); 	 if(this.onResize) 	this.onResize(); 	 	this.fixIE(); 	this.isMax=true; 	}else{ 	if(this.onRestore) 	this.onRestore(); 	if(!this.properties.dragable) 	Position.relativize(this._e); 	if(null != this._cacheM) 	this.setStyle({margin:this._cacheM}); 	if(!this.parent){ 	if(window.innerWidth) 	document.body.style.overflow="auto";  	else 	document.body.scroll ="yes"; 	Event.stopObserving(window,"scroll",this.scrollListener); 	Event.stopObserving(window,"resize",this.resizeListener); 	} 	if(this.parent && !this.properties.dragable){ 	this.style.top="0px"; 	this.style.left=this.real[0]+"px"; 	}else{ 	this.style.top=this.real[1]+"px"; 	this.style.left=this.real[0]+"px"; 		var d=this._getBdr(this._e); 	var e=this._getPdg(this._e); 	this.setStyle({ 	width:this.size.width - d[0] - e[0], 	height:this.size.height- d[1] - e[1] 	}); 		} 		this.style.zIndex=1; 	if(this.mask){ 	this.mask.style.zIndex = 0; 	Position.clone(this._e,this.mask); 	} 	if(this.onResize) 	this.onResize(); 	this.isMax = false; 	} 		}, 	min:function(){ 	}, 		rs2mx:function(){ 	var sz=Scroll.view(); 	var d=this._getBdr(this._e); 	var e=this._getPdg(this._e); 	this.setStyle({width:sz[0]-d[0]-e[0]+"px"}); 	this.setStyle({height:sz[1]-d[1]-e[1]+"px"}); 	}, 		obscr:function(evt){ 	var t=new Scroll.position(); 	var w=new Scroll.view(); 	this.style.top=t[1]+"px"; 	this.style.left=t[0]+"px"; 	}, 		getElement : function () { 	return this._e; 	}, 		setContent: function(c){ 		this._e.innerHTML = c; 	}, 		addChild : function (c) { 	this._e.appendChild(c instanceof bc.w.Component?c._e:$(c)); 	return c; 	}, 		removeChild : function (c) { 	this._e.remove(c instanceof bc.w.Component?c._e:$(c)); 	}, 		addEventListener:function(eventType,f){  	Event.observe(this._e,eventType,f);  	},  	 	removeEventListener:function(eventType,f){  	Event.stopObserving(this._e,eventType,f);  	},  	_getBdr:function(_e){ 	return [ 	parseInt(_e.style.borderRightWidth||'0')+parseInt(_e.style.borderLeftWidth||'0'), 	parseInt(_e.style.borderTopWidth||'0')+parseInt(_e.style.borderBottomWidth||'0') 	]; 	}, 	_getPdg:function(_e){ 	return [ 	parseInt(_e.style.paddingLeft||'0')+parseInt(_e.style.paddingRight||'0'), 	parseInt(_e.style.paddingTop||'0')+parseInt(_e.style.paddingBottom||'0') 	]; 	}, 	_getMgn:function(_e){ 	return [ 	parseInt(_e.style.marginLeft||'0')+parseInt(_e.style.marginRight||'0'), 	parseInt(_e.style.marginTop||'0')+parseInt(_e.style.marginBottom||'0') 	]; 	}, 		_getWsp:function(e){ 	var b,p,m,v,h; 	b=this._getBdr(e); 	p=this._getPdg(e); 	m=this._getMgn(e); 	h=b[0]+p[0]+m[0]; 	v=b[1]+p[1]+m[1]; 	return [v,h]; 	}, 		equals:function(t){ 	if(!t.type || !t.toString) 	return false; 	if(t.type!=this.type) 	return false; 	if(t.id!=this.id) 	return false; 	return true; 	}, 	hashCode:function(s){ 	var h = 0; 	 var len = s.length; 	 for (var i = 0; i < len; i++) { 	 h = 31*h + s.charCodeAt(i); 	 }  return h; 	}, 		remove:function(){ 	Element.remove(this._e); 	if(this.mask) 	Element.remove(this.mask); 	}, 		toString: function(){ 	return this.type + ':' + this.id; 	} }); 
bc.w.Container = Class.create(bc.w.Component, { 	version: "0.1.001", 	type: "bc.w.Container", 	initialize: function(id,options) { 	this.paint(id,options); 	} });  
bc.w.Panel = Class.create(bc.w.Component, { 	version: '0.1.001', 	type:"bc.w.Panel", 	initialize: function(id,o) { 	this.paint(id,o); 	this._cc(); 	}, 		_cc:function(){ 	 	if(null!=this._e){  	var _cacheCnt=new Array();  	for(var i=0,length=this._e.childNodes.length;i < length;i++){  	var _fe=this._e.childNodes[i];  	if(_fe.nodeName=='#text') continue;  	_cacheCnt.push(_fe);  	}  	Element.cleanWhitespace(this._e);  	} 	 	 	this._titleBar = new bc.w.Container("pltbc:"+this.id,{parent:this._e});  	 	this.content = new bc.w.Container("plcnt:"+this.id,{parent:this._e});  	this.content.setStyle({padding:'0px',margin:'0px',border:'0px',background:'white', overflow:'auto'});  	 	if(null!=_cacheCnt){  	for(var i=0,length=_cacheCnt.length;i<length;i++){  	this.content.addChild(_cacheCnt[i]);  	}  	} 	this._ce(); 	}, 	_ce:function(){ 	this.dragListener = this.drag.bindAsEventListener(this); 	this.dropListener = this.drop.bindAsEventListener(this); 	this.moveListener = this.move.bindAsEventListener(this); 	this.dragMaskListener = this.dragMask.bindAsEventListener(this); 	if(this._p.dragable){ 	Position.absolutize(this._e); 	this._e.setAttribute('tabindex','-1'); 	this.fixIE(); 	if(this.mask)this._e.style.zIndex = this.mask.style.zIndex + 1; 	Event.observe(this._e,"focus",function(e){ 	this._cacheZIdx = this._e.style.zIndex; 	this._e.style.zIndex = 99999; 	if(this.mask)this.mask.style.zIndex = 99997; 	}.bindAsEventListener(this)); 	Event.observe(this._e,"blur",function(e){ 	this._e.style.zIndex=this._cacheZIdx; 	if(this.mask)this.mask.style.zIndex=this._cacheZIdx-1;	}.bindAsEventListener(this)); 	Event.observe(this._titleBar._e,"mousedown",this.dragListener); 	} 		}, 	drag:function(evt){ 	Event.observe(document,"selectstart",this.dragMaskListener); 	evt = evt||event||window.event; 	this._dragObj = evt.target?evt.target : evt.srcElement; 	var bt = ":btx"; 	if(this._dragObj.id.lastIndexOf(bt)!=-1 || this._dragObj.parentNode.id.lastIndexOf(bt)!=-1) return; 	this._dragObj.style.cursor="move"; 	this.drag = true; 	if(this._e.focus) 	this._e.focus(); 	this.offsetX = Event.pointerX(evt) - parseInt(this.getStyle("left")||"0"); 	this.offsetY = Event.pointerY(evt) - parseInt(this.getStyle("top")||"0"); 	Event.observe(document,"mouseup",this.dropListener); 	Event.observe(document,"mousemove",this.moveListener); 	Event.stop(evt); 	}, 	dragMask:function(evt){ 	return false; 	}, 	drop:function(evt){ 	evt = evt||event||window.event; 	this._dragObj.style.cursor=""; 	this.drag = false; 	Event.stopObserving(document,"mouseup",this.dropListener); 	Event.stopObserving(document,"mousemove",this.moveListener); 	Event.stopObserving(document,"selectstart",this.dragMaskListener); 	if(this.onDrop) 	this.onDrop(evt); 	}, 	move:function(evt){ 	evt = evt||event||window.event; 	if(!this.drag) return; 	var l = Event.pointerX(evt) - this.offsetX; 	var t = Event.pointerY(evt) - this.offsetY; 		if(this.parent){ 	var ps = Element.getDimensions(this.parent); 	var real = Position.cumulativeOffset(this.parent); 	this.size = this.getDimensions(); 	if(l <= real[0]) 	l = real[0]; 	if(l >= real[0]+(ps.width-this.size.width)) 	l = real[0]+(ps.width-this.size.width); 	if(t <= real[1]) 	t = real[1]; 	if(t >= (real[1] + ps.height - this.size.height)) 	t = real[1] + ps.height - this.size.height; 	} 	this.setStyle({left:l+"px",top:t+"px"}); 		if(this.mask && !this.maskMax)Position.clone(this._e,this.mask); 		}, 	setContent:function(c){ 	this.content.setContent(c); 	}, 		addChild : function (child) { 	this.content.addChild(child); 	return child; 	}, 		setTitleBar : function (tbr) { 	if(typeof tbr == "object"){ 	if(tbr instanceof bc.w.TitleBar){ 	tbr.pContainer = this; 	this.titleBar = tbr; 	} 	 	this._titleBar.addChild(tbr); 	 		 		 	setTimeout(function(){this.resize(this.getDimensions())}.bind(this),300); 	}else{ 	this.setTitle(tbr); 	} 	}, 		setTitle: function(title){ 	if(this.titleBar) 	this.titleBar.setTitle(title); 	else 	this._titleBar.setContent(title); 	}, 	min:function(){ 	this.titleBar.onMin(); 	if(this.content.isShow()){ 	this.oldh=this.style.height; 	this.content.hide(); 	this.style.height=""; 	}else{ 	this.content.show(); 	} 		if(this.mask)Position.clone(this._e,this.mask); 	}, 	onMax:function(){ 	this.titleBar.onMax(); 		this._osize = this.getDimensions(); 	}, 	onRestore:function(){ 	if(this.isMax) 	this.titleBar.onMax(); 	}, 	onResize:function(e){ 	var s=this.getDimensions(); 	if(this.isMax && this._osize) 	s = this._osize; 	this.resize(s); 	}, 	resize:function(s){ 	var a=this._getBdr(this._e); 	var b=this._getPdg(this._e); 	var c=this._getWsp(this.content._e); 	var d=this.titleBar?this._getWsp(this.titleBar._e):[0,0]; 	var h = this._titleBar.getDimensions().height; 	var fixw = a[0] + b[0] + c[0]; 	var fixh = a[1] + b[1] + c[1] + d[1] + h; 	var _h = s.height - fixh; 	var _w = s.width - fixw; 	this.content.setStyle({ 	top:'0px', 	left:'0px', 	width: _w + "px", 	height:_h +"px" 	}); 		if(this.mask)Position.clone(this._e,this.mask); 	} }); 

bc.w.TitleBar = Class.create(bc.w.Component, { 	version: '0.1.002', 	type:"bc.w.TitleBar", 	initialize: function(t,o) { 	this.paint(this.type+":"+this.hashCode(t),o); 		var buttonBox = document.createElement("div"); 	buttonBox.id = this.id+":btx"; 	Element.setStyle(buttonBox,{cssFloat:'right',styleFloat:'right',padding:'0px 5px 0px 0px'}); 	this.addChild(buttonBox); 	this.event = new bc.w.TitleBar.Event(); 		var titleBox = document.createElement("div"); 	Element.setStyle(titleBox,{clear:'left',fontWeight:'bold',padding:'0px 5px 0px 5px'}); 	this.addChild(titleBox); 		if(o.icon){ 	this.icon = document.createElement("img"); 	this.icon.src = o.icon; 	titleBox.appendChild(this.icon); 	} 		this.title = document.createElement("label"); 	this.title.style.marginLeft = '5px'; 	this.title.innerHTML = t; 	titleBox.appendChild(this.title); 	var btstyle = {marginLeft:'2px',cursor:'pointer'}; 	if(this.isFixIE) btstyle.cursor = "hand"; 		this.onMin = this.event.onMinListener.bind(this); 	if(o.minIcon){ 	this.minBt = document.createElement("img"); 	this.minBt.src = o.minIcon; 	Element.setStyle(this.minBt,btstyle); 	this.minBt.title = o.minTitle || 'minimize'; 	buttonBox.appendChild(this.minBt); 	Event.observe(this.minBt,"click",function(e){ 	if(this._mx)return; 	this.pContainer.min(); 	}.bindAsEventListener(this)); 	} 		this.onMax = this.event.onMaxListener.bind(this); 	if(o.maxIcon){ 	this.maxBt = document.createElement("img"); 	this.maxBt.src = o.maxIcon; 	Element.setStyle(this.maxBt,btstyle); 	this.maxBt.title = o.maxTitle || "maximize"; 	buttonBox.appendChild(this.maxBt); 	Event.observe(this.maxBt,"click", function(e){ 	if(this._mi) return; 	this.pContainer.max(); 	}.bind(this)); 	} 		if(o.closeIcon){ 	var closeBt = document.createElement("img"); 	closeBt.src = o.closeIcon; 	Element.setStyle(closeBt,btstyle); 	closeBt.title = o.closeTitle || "Close ..."; 	buttonBox.appendChild(closeBt); 	Event.observe(closeBt,"click",function(event){ 	if(this.pContainer.onClose)	if(!this.pContainer.onClose())return;	if(this.pContainer.stopAutoRefresh)this.pContainer.stopAutoRefresh(); 	this.pContainer.remove(); 	}.bindAsEventListener(this)); 	} 	this.titleBox = titleBox; 	this.buttonBox = buttonBox; 	
 	this.addBtxClass=function(c){Element.addClassName(this.buttonBox,c);}; 
 	this.addTitleClass=function(c){Element.addClassName(this.title,c);}; 	}, 		setTitle:function(t){ 	this.title.innerHTML=t; 	}, 	setIcon:function(i){ 	this.icon.src = i; 	} }); 
bc.w.TitleBar.Event = Class.create({ 	onMaxListener:function(){ 	if(this._mx){	this._mx = false; 	this.maxBt.title = this._p.maxTitle || "maximize"; 	this.maxBt.src = this._p.maxIcon; 	}else{ 	this._mx = true; 	this.maxBt.title = this._p.restoreTitle || "restore"; 	if(this._p.restoreIcon) 	this.maxBt.src = this._p.restoreIcon; 	} 	}, 	onMinListener:function(){ 	if(this._mi){	this._mi = false; 	this.minBt.title = this._p.minTitle || 'minimize'; 	this.minBt.src = this._p.minIcon; 	}else{ 	this._mi = true; 	this.minBt.title = this._p.restoreTitle || "restore"; 	if(this._p.restoreIcon) 	this.minBt.src = this._p.restoreIcon; 	} 	} }); 
bc.a.Panel = Class.create(bc.w.Panel,{ 	version: '0.1.002', 	type:"bc.a.Panel" }); bc.a.Panel.m = { 	initialize: function(id,o) { 	this.paint(id,o); 	this._cc(); 	this.setOptions(o); 	this.subEvtListener = this.onSubmit.bindAsEventListener(this); 	this.keyEvtListener = this.keyEvt.bindAsEventListener(this); 	}, 		keyEvt:function(evt){ 		}, 			catchFormSubmit:function(f){ 	if(f){ 	var _f = $(f); 	Event.observe(_f,"submit",this.subEvtListener,true); 	Event.observe(_f,"keydown",this.keyEvtListener); 	return this; 	}  	var fs = (this.content._e).getElementsByTagName("FORM");  	if(null == fs)return;  	this._cache_fs_smt = new Array(fs.length);  	for(var i=0;i<fs.length;i++){  	Event.observe(fs[i],"submit",this.subEvtListener,true);  	Event.observe(fs[i],"keydown",this.keyEvtListener);  	}  	},  	decatchFormSubmit:function(f){  	if(f){ 	Event.stopObserving($(f),"submit",this.subEvtListener,true); 	Event.stopObserving($(f),"keydown",this.keyEvtListener); 	return; 	}  	var fs = (this.content._e).getElementsByTagName("FORM");  	if(null == fs)return;  	for(var i=0;i<fs.length;i++){  	Event.stopObserving(fs[i],"submit",this.subEvtListener,true);  	Event.stopObserving(fs[i],"keydown",this.keyEvtListener);  	}  	},  	 	onSubmit:function(evt){  	this.elem = evt.target?evt.target : evt.srcElement;  	this.url=this.elem.action;  	 	if(this._vl){  	for(var i=0;i < this._vl.length;i++){  	if(!this._vl[i](this.elem)){  	Event.stop(evt);  	return false;  	}  	}  	}  	if(null != this.elem){  	 	if(this.options.preFunction) 	if(!this.options.preFunction())	return ; 	this.reqType = 'text'; 	this.options.form = this.elem; 	this.sendUpdateRequest(this.elem.target||this.content._e);  	}  	Event.stop(evt);  	return false;  	},  	handler:function(r){  	this.catchFormSubmit();  	if(this.options.postFunction)  	this.options.postFunction(r);  	this.ri(false);  	},  	error:function(n,e) {  	this.content.setContent("<b>Error: </b>"+n+"<br>"+e);  	this.ri(false);  	},  	 	addValidator:function(v){  	if(!this._vl)this._vl = [];  	this._vl.push(v);  	},  	 	removeValidator:function(){  	this._vl.clear();  	},  	load:function(url,o){  	this.url = url; 	Object.extend(this.options,o); 	this.sendUpdateRequest(this.content._e); 	 	},  	reload:function(){  	this.sendUpdateRequest(this.content._e);  	},  	indicator:function(b){ 	if(b && this.elem && typeof this.elem.target=="object"){ 	alert("All of the fields in the form do'nt named \"target\",the indicate failured."); 	return true; 	} 	if(this.options.indicator){ 	this.options.indicator(b,((this.elem!=null?this.elem.target:null)||this.content._e)); 	}else 	if(b){ 	((this.elem!=null?this.elem.target:null)||this.content._e).innerHTML=" Lodding..."; 	} 	} }; Object.extend(bc.a.Panel.prototype, bc.a.Base); Object.extend(bc.a.Panel.prototype, bc.a.Panel.m);  
bc.w.PopupPanel = Class.create(bc.w.Component, { 		version: "0.1.006", 		type: "bc.w.PopupPanel", 		create: function(id,o) { 	this.paint(id,o); 	this._e.style.position="absolute"; 	this._shadow(); 	this._ish = true; 	this.hide(); 		this.hideListener = this.hide.bindAsEventListener(this); 	this.mouseListener = this.ood.bindAsEventListener(this); 	}, 	_shadow:function(){ 	if(this.shadow)return; 	new Insertion.After(this._e,  	 '<div id="'+this.type+':sdw:'+this.id+ 	 '" style="background-color:#A5BFDA;position:absolute;' + 	 '-moz-opacity:0.6;opacity:0.6;'+ 	 'filter:progid:DXImageTransform.Microsoft.Alpha(opacity=60);" ' + 	 '</div>'); 	this.shadow = $(this.type+':sdw:'+this.id); 	}, 	_shadowShow:function(){ 	Element.show(this.shadow); 	this._shadowPosition(); 	}, 	_shadowPosition:function(){ 	Position.clone(this._e,this.shadow,{setHeight:true, setWidth:true,offsetTop:4,offsetLeft:4}); 	}, 		show:function(evt){ 	if(this.isShow()) 	return; 		this._ish = false; 	setTimeout(function(){ 	this._ish=true; 	}.bind(this),15); 	this._tgt = evt.target?evt.target : evt.srcElement; 	Element.show(this._e); 	this.position(this._tgt); 	this._shadowShow(); 	this.setStyle({zIndex:99999}); 		this.fixIE(); 	var os; 	os = window.innerWidth ? "window" : "document"; 	Event.observe(this._e, "click", this.hideListener); 	Event.observe(eval(os), "mousedown", this.mouseListener); 	if(this.onShow) 	this.onShow(evt); 	}, 	hide:function(){ 	if(!this._ish) return; 	var os; 	os = window.innerWidth ? "window" : "document"; 	Event.stopObserving(eval(os), "mousedown", this.mouseListener); 	Event.stopObserving(this._e, "click", this.hideListener); 		this.style.zIndex=2; 	if(this.mask){ 	this.mask.style.zIndex = 1; 	Position.clone(this._e,this.mask); 	} 	Element.hide(this._e); 	if(this.shadow) 	Element.hide(this.shadow); 	if(this.mask) 	Element.hide(this.mask); 	if(this.onHide) 	this.onHide(); 	}, 		position:function(t){ 	var wz = Scroll.view(); 	var tz = Element.getDimensions(t); 	var thz = this.getDimensions(); 	var fix=Scroll.position(); 	var tt=Position.cumulativeOffset(t);	var tp=0,lt=0; 	if(wz[1]-(tt[1]-fix[1])-tz.height < thz.height) 	tp =-thz.height; 	else 	tp = tz.height; 	if(wz[0]-(tt[0]-fix[0]) < thz.width) 	lt = -(thz.width-(wz[0]-(tt[0]-fix[0]))); 	Position.clone(t,this._e,{setHeight:false, setWidth:false,offsetTop: tp,offsetLeft:lt}); 	}, 	ood:function(e){ 	var o = false;	var fix=Scroll.position(); 	 	 var clickX = e.clientX+fix[0]; 	 var clickY = e.clientY+fix[1]; 	 o =!Position.within(this._e,clickX,clickY); 	if(this._tgt &&Position.within(this._tgt,clickX,clickY)) 	o = false; 	 if(o) 	 	this.hide(); 	}, 	remove:function(){ 	Element.remove(this.shadow); 	Element.remove(this._e); 	if(this.mask)Element.remove(this.mask); 	} }); 
bc.w.Popup = Class.create(bc.w.PopupPanel, { 	version: '0.1.005', 	type:"bc.w.Popup", 		initialize: function(t,tip,o) { 	this._ish = true; 	this.create("bc.w.Popup:"+this.hashCode(t),Object.extend({duration:300},o)); 	var parten = /^\${.*}$/; 	if(parten.test(tip)){ 	var p = /^(\${)?|(}$)/gi; 	this._tipAtr = tip.replace(p,""); 	}else if(tip){ 	var __tipp = document.createElement("div"); 	__tipp.innerHTML = tip; 	this.addChild(__tipp); 	} 	if(null == t || "" == t) 	return this; 	this.showEventListener = this.popup.bindAsEventListener(this); 		var _t = $(t); 	if(_t){ 	Event.observe(_t,"mouseover",this.showEventListener); 	Event.observe(_t,"mouseout",this.hideListener); 	} 		var items = $$(t); 	hidl = this.hidden.bindAsEventListener(this); 	for(var i=0,l=items.length;i<l;i++){ 	Event.observe(items[i],"mouseover",this.showEventListener); 	Event.observe(items[i],"mouseout",hidl); 	} 	}, 	hidden:function(evt){ 	setTimeout(function(){this.hide();}.bind(this),this._p.duration?this._p.duration:290); 	}, 	popup:function(evt){ 	var _tgt = evt.target?evt.target : evt.srcElement; 	if(this._tipAtr){ 	this.setContent(""); 		var _t = ""+_tgt.getAttribute(this._tipAtr); 	this.setContent(this._p.isUnescape?_t.unescapeHTML():_t); 	} 	this.show(evt);  	} }); 
bc.a.Popup = Class.create(bc.w.PopupPanel,{ 	version: '0.1.002', 	type:"bc.a.Popup" }); Object.extend(bc.a.Popup.prototype, bc.a.Base); bc.a.Popup.m = { 		initialize: function(id,u,o) { 	this.create(id,o); 	this.setOptions(o); 	this.setProperties(o); 	this.url = u; 	}, 	popup:function(e){ 	this.show(e); 	this.sendUpdateRequest(this._e);  	},  	indicator:function(b){ 	if(this.options.indicator){ 	this.options.indicator(b,this._e); 	}else 	if(b){ 	this._e.innerHTML=" Lodding ... "; 	} 	},  	error:function(n,e) {  	this.ri(false);  	this.setContent("<pre>"+e+"</pre>");  	},  	ff:function(e){  	this.setContent("");  	this.setContent('<iframe src="javascript:void(0);" width="100%" height="100%" frameborder="10" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" name="'+this.id+'#ep" id="'+this.id+'#ep"></iframe>');  	 	setTimeout(function(){ 	 	var ep=frames[this.id+"#ep"]; 	ep.document.clear(); 	 	ep.document.write(e); 	 	ep.document.close();  	}.bind(this),10);  	} }; Object.extend(bc.a.Popup.prototype, bc.a.Popup.m);  
bc.w.ActiveMenu = Class.create(bc.w.PopupPanel, { 	version: "0.1.010", 	type: "bc.w.ActiveMenu", 		initialize: function(id,o) { 	this.create(id,o); 	this.mp = document.createElement("ul");	this.mp.id= this.id;	this.addChild(this.mp); 	this.entry = null; 	Element.setStyle(this.mp,{listStyle:'none',margin:'0px',padding:'2px'}); 	var obj = this; 	new bc.u.c.Ul4Menu(this.mp,Object.extend({ 	cursor:null, 	callback:function(vs){ 	this.perform(vs); 	}.bindAsEventListener(obj) 	},o)); 	}, 	perform:function(vs){ 	if(!this._command) return; 	this._command[vs[0]].call(this,vs); 	}, 	addCommand:function(c,f){ 	if(!this._command) this._command = {}; 	this._command[c] = f; 	}, 		addMenuItem:function(i){ 	if(!this.items)this.items=[]; 	if(typeof i == "object"){ 	this.mp.appendChild(i instanceof bc.w.MenuItems?i._e:i); 		if(i instanceof bc.w.MenuItems)i._setOpt(this._p); 	this.items.push(i); 	}else{ 	new Insertion.Bottom(this.mp,i);	} 	}, 	getMenu:function(i){ 	}, 	getMenuCount:function(){ 	}, 		removeMenuItem:function(i){ 	this.items[i].remove(); 	} }); 

bc.w.MenuItems = Class.create({ 	version: "0.1.005", 	type: "bc.w.MenuItems", 		crtc:function(n,t,o){	this._e = document.createElement("li"); 	this._e.id= n;	this._n=t; 	this._o = o || {}; 	this._e.style.padding="1px"; 
	this.addClass = function (c){ 	Element.addClassName(this._e,c); 	} 	}, 		_setOpt:function(o){ 	this._o = Object.extend(this._o,o || {}); 	}, 	setShortcut:function(k){ 	}, 		disabled:function(){ 	this._e.setAttribute('disabled',true); 	Element.addClassName(this._e,this._o.disabledClass); 		}, 	isEnabled:function(){ 	return this._e.getAttribute('disabled'); 	}, 	toString:function(){ 	return this.type + ':' + this.id; 	} }); 
bc.w.MenuItem = Class.create(bc.w.MenuItems, { 	version: "0.1.004", 	type: "bc.w.MenuItem", 	initialize: function(n,t,o) { 	this.crtc(n,t,o); 	this.crt(); 	}, 	crt:function(){ 	this.item=document.createElement("div"); 		this.ibx = null; 	if(this._o && this._o.icon){ 	this.ibx=document.createElement("img"); 	this.ibx.style.border = "0px"; 	this.ibx.src=this._o.icon; 	}else{ 		this.ibx = document.createElement("label"); 	this.ibx.innerHTML = "&nbsp;&nbsp;"; 	Element.setStyle(this.ibx,{width:16,border:0,padding:0}); 	} 	this.item.appendChild(this.ibx); 	if(this._o && this._o.activeIcon){ 	Event.observe(this._e,"mouseover",function(e){ 	this.ibx.src=this._o.activeIcon; 	}.bind(this)); 	Event.observe(this._e,"mouseout",function(e){ 	this.ibx.src=this._o.icon; 	}.bind(this)); 	} 	this.ibx.style.marginRight="5px"; 	var l = document.createElement("label"); 	l.innerHTML = this._n; 	this.item.appendChild(l); 		this._e.appendChild(this.item); 	}, 	remove:function(){ 	Element.remove(this._e); 	}, 	addEventListener:function(t,f){	Event.observe(this._e,t,f); 	if(!this._lisnr)this._lisnr = []; 	this._lisnr.push([t,f]); 	}, 	removeEventListener:function (){ 	if(!this._lisnr) 	return; 	else{ 	for(var i=0,length = this._lisnr.length;i < length;i++){ 	Event.stopObserving(this._e,this._lisnr[i][0],this._lisnr[i][1]); 	} 	} 	} }); 
bc.w.MenuGroup = Class.create(bc.w.MenuItem, { 	version: "0.1.001", 	type: "bc.w.MenuGroup", 	initialize: function(n,t,o) { 	this.crtc(n,t,o); 	this.r=0; 	this.overListener = this.over.bindAsEventListener(this); 	this.outListener = this.out.bindAsEventListener(this); 	this.clickListener = this.click.bindAsEventListener(this); 	this.addIndi(); 	this.crt(); 		}, 	addIndi:function(){ 		this.indi = document.createElement("label"); 	this.indi.innerHTML = ">"; 	Element.setStyle(this.indi,{cssFloat:'right',styleFloat:'right',padding:'0px 5px'}); 	this._e.appendChild(this.indi); 		Event.observe(this._e,"click",function(e){ 	Event.stop(e); 	}); 	Event.observe(this._e,"mousedown",this.clickListener); 	Event.observe(this._e,"mouseover",this.overListener); 	Event.observe(this._e,"mouseout",this.outListener); 	}, 	click:function(evt){ 	this.over(evt); 	Event.stop(evt); 	}, 	over:function(evt){ 	if(this.subMenu && this.subMenu.isShow())return; 	this.subMenu.show(evt); 	
		}, 	out:function(evt){ 		if(Position.within(this._e,Event.pointerX(evt),Event.pointerY(evt))){ 		return; 	}else{ 		} 	setTimeout(function(){ 		if(this.subMenu && this.subMenu.isShow()) 	this.subMenu.hide(); 	}.bindAsEventListener(this),150); 	}, 	addSubMenu:function(m){ 	this.subMenu = m; 	document.body.appendChild(m._e); 
	this.subMenu.position=function(t){ 	Position.clone(this._e,this.subMenu._e,{setHeight:false, setWidth:false,offsetTop:-4,offsetLeft:this._e.offsetWidth -4}); 	}.bind(this); 	} }); 
bc.w.MenuSeparator = Class.create(bc.w.MenuItems,{ 	version: "0.2.001", 	type: "bc.w.MenuSeparator", 	initialize: function(t,s) {	this.crtc(); 	this._e.setAttribute('disabled','true'); 	this.options = { 	color:'#cc2', 	shadow:'#F0F0F0', 	textBgColor:t?'white':'transparent', 	textColor:'#788', 	textWidth:t?'3.5em':'1em', 	fontSize:'70%' 	}; 	Object.extend(this.options,s||{}); 	this.__crtSp(t); 	}, 	__crtSp:function(t){ 	var s ='<div style="margin-top:8px;border-top:1px solid ' +  	this.options.color + ';border-bottom:1px solid ' +  	this.options.shadow + '"></div>'; 	var s1 = '<span style="display:block;background:{textBgColor};' +  	'color:{textColor} !important;position: relative;' +  	'margin: -.8em 0 0px 0;width:{textWidth};padding-right:2px;' +  	'font-size:{fontSize}">{text}</span>'; 	s1 = s1.replace(/{textBgColor}/gi,this.options.textBgColor); 	s1 = s1.replace(/{textColor}/gi,this.options.textColor); 	s1 = s1.replace(/{textWidth}/gi,this.options.textWidth); 	s1 = s1.replace(/{fontSize}/gi,this.options.fontSize); 	s1 = s1.replace(/{text}/gi,t || "&nbsp;"); 	this._e.innerHTML = s + s1; 	}}); 
bc.w.AroundMenu = Class.create(new bc.w.Component(),{ 	version: "0.1.017", 	type:"bc.w.AroundMenu", 	initialize: function(id,t,v,o) { 	this.paint(id,o); 	this.overListener = this.over.bindAsEventListener(this); 	this.outListener = this.out.bindAsEventListener(this); 	this.cc(t,v); 	Event.observe(this._e,"mouseover",this.overListener); 	Event.observe(this._e,"mousedown",function(evt){Event.stop(evt)}); 		}, 	cc:function(t,v){ 	var c=document.createElement("a"); 	c.href='javascript:void(0);'; 	this.href=c.href; 		this._t=document.createElement("label"); 	this._t.innerHTML=t; 	this._t.style.display="block"; 	c.appendChild(this._t); 		this._v=document.createElement("input"); 	this._v.type="hidden"; 	this._v.name=(this.properties.name||this.id); 	this._v.value=v; 	c.appendChild(this._v); 	this.addChild(c); 		this.ip=document.createElement("div"); 	this.ip.style.position="absolute"; 	c.appendChild(this.ip); 	var i=document.createElement("input"); 	i.type="image"; 	i.src=this.properties.icon; 	this.ip.appendChild(i); 	Element.hide(this.ip); 		this.menu=new bc.w.ActiveMenu(this.type+this.id,{parent:this._e}); 	
	this.menu.onHide=function(){ 	Element.hide(this.ip); 	this._isIS=false; 	}.bind(this); 		Event.observe(this.ip,"click",function(evt){ 	this.menu.show(evt); 	return false; 	}.bindAsEventListener(this)); 	}, 	over:function(evt){ 	Event.observe(this._e,"mouseout",this.outListener); 	if(this._isIS)	return; 	var tz = this.getDimensions(); 	Element.show(this.ip); 	var iz=Element.getDimensions(this.ip); 		Position.clone(this._e,this.ip,{ 	setHeight:false,  	setWidth:false, 	offsetTop: tz.height, 	offsetLeft:tz.width-iz.width 	}); 	this._isIS= true; 	}, 	out:function(evt){ 	Event.stopObserving(this._e,"mouseout",this.outListener); 	if(!this.menu.isShow()){ 	Element.hide(this.ip); 	this._isIS=false; 	} 	}, 	setValue:function(t,v){ 	this._t.innerHTML=t; 	this._v.value=v; 	}, 	addMenuItem:function(i){ 	this.menu.addMenuItem(i); 	}, 	remove:function(e){ 	this.menu.remove(); 	Element.remove(this._e); 	} }); 
bc.a.LinkedOption = Class.create(bc.a.Base, { 	version:"0.2.003", 	type:"bc.a.LinkedOption", 	initialize: function(id,linkid,url,o) { 	this.url = this._u = url; 	this.id = id; 	this.setOptions(o); 	if(this._u.indexOf('?')>0) 	this._u += "&id="; 	else 	this._u += "?id="; 	this._t = $(linkid); 	if(!this.options.selector) this.options.selector=$F(linkid); 	Object.extend(this.options,{ 	source:id, 	eventType:this.options.eventType ? this.options.eventType : "change" 	}); 	if(!this.options.infoPanel){ 	if(!$(id + ":info")) 	new Insertion.After(this._t,"<label id='"+id+":info'></label>"); 	this.options.infoPanel = id + ":info"; 	} 	this.link=this.el;		if(!this._catchEvent(this.el)) 	this.el(null); 		if(this.options.empty){ 	this._eo = document.createElement("option"); 	this._eo.text = this.options.emptyText?this.options.emptyText:"--Select Item--"; 	this._eo.value = this.options.emptyValue?this.options.emptyValue:""; 	} 	}, 	el:function(e){ 	if(this.options.preFunction) 	if(!this.options.preFunction())	return ; 	this.url = this._u + $F(this.id); 	if(this.options.selector) 	this.url += "&selector=" + this.options.selector; 	this.sendRequest(); 	},  	handler:function(r) { 	if(this._t.length > 0){ 	this._t.length = 0; 	this._t.selectedIndex = -1; 	}  	if(this._eo)  	this._t.add(this._eo,window.innerWidth?null:0);  	 	this.parse(r.responseXML);  	if(this.options.postFunction)  	this.options.postFunction(r);  	this.ri(false);  	},  	error:function(n,e){  	$(this.options.infoPanel).innerHTML = "Error:"+e;  	},  	indicator:function(b){  	if(this.options.indicator)  	this.options.indicator(b,$(this.options.infoPanel));  	else  	if(b){  	$(this.options.infoPanel).show();  	$(this.options.infoPanel).innerHTML = "Loading ...";  	}else{  	$(this.options.infoPanel).hide();  	}  	},  	parse: function(xml) { 	 var root = xml.documentElement; 	 var eles = root.getElementsByTagName("elements"); 	 if (eles.length > 0) { 	 var responseNode = eles[0]; 	 var itemNodes = responseNode.getElementsByTagName("item"); 	 for (var i=0; i<itemNodes.length; i++) { 	var c = document.createElement("option"); 	c.text = itemNodes[i].getAttribute("name"); 	c.value = itemNodes[i].getAttribute("id"); 	this._t.add(c,window.innerWidth?null:this._t.length); 	if(this.options.selector){ 	var _s = this.options.selector.split(","); 	for(var j=0,a=_s.length;j<a;j++){ 	if(_s[j] == c.value){ 	c.selected = true; 	break; 	} 	} 	} 	 } 	 }  } }); 
bc.a.Autocompleter = Class.create(bc.w.PopupPanel, {}); Object.extend(bc.a.Autocompleter.prototype, bc.a.Base); bc.a.Autocompleter.m = { 	version: '0.1.002', 	type:"bc.a.Autocompleter", 	initialize : function(t, url, o) { 	this._tgt = $(t); 	this.create(this._tgt.id + ":auto", Object.extend(o, {})); 	this.url = url; 	this.setOptions(Object.extend(o, { 	fields :o.fields + "," + this._tgt.id 	})); 	this.setProperties(o); 	this._tgt.setAttribute('autocomplete', 'off'); 	this.reqType = 'XML'; 	this._items = new Array();		Event.observe(this._tgt, "focus", function() { 	this.select(); 	}.bindAsEventListener(this._tgt)); 		Event.observe(this._tgt, "keypress", this.onKeyPress 	.bindAsEventListener(this)); 	}, 	onKeyPress : function(e) { 	switch (e.keyCode) { 	case Event.KEY_TAB: 	this.hide(); 	Event.stop(e); 	case Event.KEY_RETURN: 	case Event.KEY_ESC: 	this.hide(); 	Event.stop(e); 	return; 	case Event.KEY_LEFT: 	case Event.KEY_RIGHT: 	return; 	case Event.KEY_UP: 	return; 	case Event.KEY_DOWN: 	return; 	} 	if (this.observer) 	clearTimeout(this.observer); 	this.observer = setTimeout(this.onOC.bind(this), 350); 	}, 		onOC : function() { 		if ($F(this._tgt).length < (this.options.minChars || 1)) 	this.hide(); 	else 		this.sent(); 	}, 		sent : function() { 				this.show( { 	target :this._tgt 	}); 	this.ri(true); 		this.sendRequest(); 			}, 	handler : function(r) { 	var rlt = this.parse(r.responseXML); 	this._shadowPosition(); 	if (this.options.postFunction) 	this.options.postFunction(r,rlt); 	this.ri(false); 	}, 	indicator : function(b) { 	if (this.options.indicator) 	if (b) 	this.options.indicator(b, this._e); 	else if (b) { 	this.setContent("Loading ..."); 	} 	}, 	parse : function(xml) { 	var rlt = true; 	this.setContent(""); 	var root = xml.documentElement; 	var eles = root.getElementsByTagName("elements"); 	if (eles.length < 1) 	rlt = false; 	var responseNode = eles[0]; 	var itemNodes = responseNode.getElementsByTagName("item"); 	if(itemNodes.length ==1 && itemNodes[0].getAttribute("disabled") == "true") 	rlt = false; 	var _p = document.createElement("UL"); 	_p.style.height = "100%";	this.addChild(_p); 	for ( var i = 0; i < itemNodes.length; i++) { 	var n = document.createElement("LI"); 	n.innerHTML = itemNodes[i].getAttribute("name"); 	n.id = itemNodes[i].getAttribute("id"); 	_p.appendChild(n); 	} 	new bc.u.c.Ul(_p, this.options); 	return rlt; 	}, 	empty : function() { 	this.ri(false); 	}, 	error : function(n, e) { 		this.setContent("Error:" + n + "," + e); 		}, 	position : function(el) { 	Position.clone(el, this._e, { 	setHeight :false, 	setWidth :true, 	offsetTop :$(el).offsetHeight 	}); 	} }; Object.extend(bc.a.Autocompleter.prototype, bc.a.Autocompleter.m); var app = { 		init:function(i,r){ 	if(!i) return; 	if(this.isLoaded) i.call(); 	if(!this._cah)this._cah = new Array(); 	if(!this._rex)this._rex = new Array(); 	this._cah.push(i); 	if(r)  	this._rex.push(r);  	else  	this._rex.push(/.*$/); 	}, 	load:function(){ 	if(typeof this._cah == "undefined") 	return true; 	var s = window.location.pathname; 	for(var i=0;i < this._cah.length;i++){ 	if(!this._rex[i].test(s)) 	continue; 	 	this._cah[i].call(); 	 	} 	this.loaded(); 	this.isLoaded = true; 	}, 	release:function(){ 	this._cah.length = 0; 	this._rex.length = 0; 	}, 	loaded:function(){ 	} }; app.init(function(){}); var domElement = (window.opera) ? document : window; Event.observe(domElement,"load",app.load.bindAsEventListener(app),true); Event.observe(domElement,"unload",app.release.bindAsEventListener(app),true); 
bc.m.Uploader = function(f,o){ 	this.version = "0.1.000"; 	this.type = "bc.m.Uploader"; 	this.form = $(f); 	this._proxyId = this.type+":proxy:"+(this.form.name||this.form.id); 	this.setOptions(o); 	this.crtProxy(); 	this._cacheTarget = this.form.target; 	this.listener = this.catchEvent.bindAsEventListener(this); 	Event.observe(this.form,"submit",this.listener); }; bc.m.Uploader.prototype = { 	setOptions:function(o){ 	this.options = Object.extend(o||{}); 	}, 	catchEvent:function(evt){ 	if(this.isProcess) return; 	this.isProcess = true; 		this.changePipe(); 	if(this.proxy){ 	var _p =frames[this._proxyId]; 	if(_p)_p.document.clear(); 	} 	this.crtMask(); 		this.checkStatus(); 		return true;	}, 		crtProxy:function(){ 	if($(this._proxyId)==null){ 	var p = '<iframe id="'+this._proxyId+'" name="'+this._proxyId+'" style="width:0;height:0;display:none"></iframe>'; 	new Insertion.After(this.form,p); 	this.proxy = $(this._proxyId); 	return this.proxy; 	} 	}, 	crtMask:function(){ 	var _mid = this.type +':mask'; 	new Insertion.After(this.form,  	 '<iframe name="'+ _mid + '" id="'+ _mid +'" '+ 	 'style="background-color:#A5BFDA;position:absolute;-moz-opacity:0.5;opacity:0.5;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=80);" ' +	 'src="" frameborder="0" scrolling="no"></iframe>'); 	this.mask = $(_mid); 	Position.clone(this.form,this.mask); 	}, 	clearMask:function(){ 	Element.remove(this.mask); 	}, 	changePipe:function(){ 	this.form.target = this._proxyId;	}, 	closePipe:function(){ 	this.form.target = this._cacheTarget; 	this.form.action = this.options.nextUri || this.form.action; 	}, 	showMessage:function(m){ 	if(this.onMessage){ 	if(this.onMessage(m)) 	return; 	} 	if(this.options.message) 	this.message = $(this.options.message); 	else{ 	this.message = document.createElement("div"); 	this.form.appendChild(this.message); 	} 	this.form.reset(); 	this.message.innerHTML = m; 	}, 	checkStatus:function(){ 	var _proxy =frames[this._proxyId]; 	if(!_proxy || !_proxy.document){ 	clearInterval(this.timer); 	return; 	} 		this.timer = window.setInterval(function(){ 	var mk = -1; 	var rlt = _proxy.document.body.innerHTML; 	if(rlt == null || rlt.replace(/(^\s*)|(\s*$)/g,"")=="") 	return; 	else 	mk = !(/^\s*ok\s*$/i.test(rlt))?0:1; 	clearInterval(this.timer); 	this.clearMask(); 	this.closePipe(); 	this.isProcess = false; 	switch(mk){ 	case 0: 	this.showMessage(rlt); 	break; 	case 1: 	Event.stopObserving(this.form,"submit",this.listener); 	delete this.proxy;this.proxy=null;	if(this.onUploaded) 	if(this.onUploaded()) 	Form.submit(this.form);	} 	}.bind(this),1000); 	} }; 
bc.w.FilePicker = Class.create(bc.w.Component, { 	version: "0.1.002", 	type:"bc.w.FilePicker", 	initialize: function(n,o) { 	this.paint(this.type + ":" + this.hashCode(n),o); 	this._isize = o.size||45;	this._tmx = (o.textMax||1024);	this._fmc = o.fileMax||1024;	this.queue = []; 	this.cc(n); 	}, 	cc:function(n){ 	var obj = this; 	var i = new bc.w.FilePicker.Picker(n,Object.extend({ 	size:this._iszie, 	textMax:this._tmx 	},this._p)); 	this.addChild(i._e); 
	i.checkExt=function(v){ 	if(this.queue.indexOf(v) > -1 ) 	return true; 	else { 	this.queue.push(v); 	return false; 	} 	}.bind(this); 
	i.onRemove=function(e,v){ 		if(this.queue.length == this._fmc) 	this.cc(this.n); 	var idx = this.queue.indexOf(v); 	if(idx > 0) 	this.queue=this.queue.slice(0,idx).concat(this.queue.slice(idx+1,this.queue.length)); 	else 	this.queue = this.queue.slice(idx+1,this.queue.length); 	Element.remove(e); 	}.bind(this); 
	i.onUpdate=function(e){ 		if(this.queue.length == this._fmc) 	return false; 	this.cc(n+this.queue.length); 	}.bind(this); 	}, 	setFileMax:function(c){ 	this._fmc = c; 	} }); 
bc.w.FilePicker.Picker = Class.create({ 	version: "0.1.000", 	type:"bc.w.FilePicker.Picker", 	initialize: function(n,o) { 	this._o = Object.extend({},o||{}); 	this.max = o.textMax; 	this.size = o.size; 	this.cc(n); 	}, 	cc:function(n){ 	this._e= document.createElement("span"); 	if(!this._o.inline) 	Element.setStyle(this._e,{display:'block'}); 	this.item=document.createElement("input"); 	this.item.type="file"; 	this.item.name = n; 	this.item.onChange = this.change.bind(this); 	this._e.appendChild(this.item); 	Event.observe(this.item,"change",this.change.bindAsEventListener(this)); 	}, 	change:function(evt){ 	if(this.checkExt(this.item.value)){ 	alert("The file existed."); 	this.item.value = ""; 	return false; 	} 	setTimeout(this.update.bind(this),300); 	}, 	update:function (){ 	this.item.style.display="none"; 	var v=v1= this.item.value; 	var l = v.length; 	var sp ="/"; 	if(v.lastIndexOf(sp) < 0) 	sp = "\\"; 	if(l > this.max){ 	v = v.substr(v.lastIndexOf(sp),l-v.lastIndexOf(sp)); 	v1=v1.substr(0,l-v.length); 	v = v1.substr(0,(this.max-v.length-3))+"..."+v; 	} 	var t = document.createElement("label"); 	t.innerHTML = v; 	t.title = this.item.value; 	this._e.appendChild(t); 	this._e.appendChild(document.createTextNode(" [")); 	var a = document.createElement("a"); 	a.href = "javascript:void(0)"; 	a.innerHTML = this._o.btText||" 移 除 "; 	this._e.appendChild(a); 	this._e.appendChild(document.createTextNode("]")); 		Event.observe(a,"click",function(evt){ 	this.onRemove(this._e,this.item.value);	}.bindAsEventListener(this)); 		this.onUpdate(); 	} }); 